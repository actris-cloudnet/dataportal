#!/bin/zsh
set -e

if [ -z $1 ]; then
    echo "Action not specified"
    exit 1
fi

action=$1

fileserver_port=4000
frontend_port=8000
backend_port=3000
pid_dir='.'
inbox_dir='inbox'
fileserver_dir='public'

if [[ "$NODE_ENV" == 'test' ]]; then
    backend_port=3001
    pid_dir='tests'
    inbox_dir='tests/data/inbox'
    fileserver_dir='tests/data/public'
fi

typeset -A backend_targets
typeset -A frontend_targets

backend_targets[$pid_dir/.listen-inbox.pid]="scripts/listen-inbox.sh $inbox_dir"
backend_targets[$pid_dir/.node.pid]="npx nodemon -w build -- $backend_port"

waitport () {
    timeout=10
    interval=0.5
    i=0
    while ! nc -z localhost $1; do
        if [[ "$i" -ge $timeout ]]; then
            echo "Timeout"
            exit 2
        fi
        sleep $interval
        i=$((i+$interval))
    done
}

backend_postinstall () {
    mkdir -p public
    mkdir -p inbox
    mkdir -p tests/data/inbox
    mkdir -p tests/data/public
    createdb dataportal
    createdb dataportal-test
    npx typeorm schema:sync
}

case "$action" in
    start)
    echo "Starting backend..."
    cd backend
    for target cmd in ${(kv)backend_targets}; do
        if [[ ! -f $target ]]; then
            echo $cmd
            eval "${cmd} >> $pid_dir/all.log 2>&1 &"
            echo $! > $target
        fi
    done
    echo
    cd ..
    echo "Starting nginx..."
    nginx -p . -c .nginx.conf

    waitport $backend_port
    waitport $fileserver_port
    waitport $frontend_port
    ;;

    stop)
    for pid in backend/$pid_dir/.*.pid; do
        echo $pid
        pkill -F $pid
        rm -f $pid
    done
    echo .nginx.pid
    pkill -F .nginx.pid && rm .nginx.pid
    truncate --size 0 */$pid_dir/all.log
    ;;

    purge)
    dropdb dataportal
    dropdb dataportal-test
    rm -r */build
    rm -r */dist
    rm -r */node_modules
    ;;

    clean)
    rm -vf backend/$pid_dir/.*.pid
    rm -vf .nginx.pid
    ;;

    reset)
    cd backend
    rm -r public
    mkdir public
    rm -r inbox/*
    npx typeorm schema:drop
    npx typeorm schema:sync
    cd ..
    ;;


    install)
    echo "Installing backend..."
    cd backend
    npm install
    backend_postinstall
    echo
    echo "Installing frontend..."
    cd ../frontend
    npm install
    cd ..
    ;;

    ci)
    echo "Installing backend..."
    cd backend
    npm ci
    backend_postinstall
    echo
    echo "Installing frontend..."
    cd ../frontend
    npm ci
    cd ..
    ;;

    build)
    echo "Building backend..."
    cd backend
    npm run build
    echo "Building frontend..."
    cd ../frontend
    npm run build
    cd ..
    ;;

    *)
    echo "Unknown action $action"
    exit 1
    ;;
esac

