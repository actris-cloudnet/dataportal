#!/bin/zsh
set -e

if [ -z $1 ]; then
    echo "Action not specified"
    exit 1
fi

action=$1

fileserver_port=4000
frontend_port=8000
backend_port=3000
pid_dir='.'
inbox_dir='inbox'

if [[ "$NODE_ENV" == 'test' ]]; then
    backend_port=3001
    pid_dir='tests'
    inbox_dir='tests/data/inbox'
fi

if [ -f backend/listen-path ]; then
    read -r inbox_dir < backend/listen-path
fi

typeset -A backend_targets
typeset -A frontend_targets

backend_targets[$pid_dir/.listen-inbox.pid]="scripts/listen-inbox.sh $inbox_dir"
backend_targets[$pid_dir/.node.pid]="npx nodemon -w build -- $backend_port"

is_production () {
    [ "$NODE_ENV" '==' 'production' ]
}

waitport () {
    timeout=10
    interval=0.5
    i=0
    while ! nc -z localhost $1; do
        if [[ "$i" -ge $timeout ]]; then
            echo "Timeout"
            return 2
        fi
        sleep $interval
        i=$((i+$interval))
    done
    return 0
}

backend_postinstall () {
    mkdir -p public
    mkdir -p inbox
    mkdir -p tests/data/inbox
    mkdir -p tests/data/public
    createdb dataportal
    createdb dataportal-test
    npm run build
    npx fixtures ./fixtures/Site.yml
}

case "$action" in
    start)
    echo "Starting backend..."
    cd backend
    for target cmd in ${(kv)backend_targets}; do
        if [[ ! -f $target ]]; then
            echo $cmd
            eval "nohup ${cmd} >> $pid_dir/all.log 2>&1 &"
            echo $! > $target
        fi
    done
    echo
    cd ..
    if ! is_production; then
        echo "Starting nginx..."
        if [[ ! -f .nginx.pid ]]; then
            nginx -p . -c .nginx.conf
        fi
        waitport $fileserver_port
        waitport $frontend_port
    fi

    waitport $backend_port
    exit $?
    ;;

    stop)
    set +e
    for pid in backend/$pid_dir/.*.pid; do
        echo $pid
        pkill -F $pid
        rm -f $pid
    done
    if ! is_production; then
        echo .nginx.pid
        pkill -F .nginx.pid
        truncate --size 0 */$pid_dir/all.log
    fi
    ;;

    restart)
    ./control stop
    ./control start
    ;;

    test-start)
    export NODE_ENV='test' && ./control start && unset NODE_ENV
    ;;

    test-stop)
    export NODE_ENV='test' && ./control stop && unset NODE_ENV
    ;;

    test-restart)
    export NODE_ENV='test' && ./control restart && unset NODE_ENV
    ;;

    purge)
    dropdb dataportal
    dropdb dataportal-test
    rm -rf */build
    rm -rf */dist
    rm -rf */node_modules
    ;;

    clean)
    set +e
    rm -vf backend/$pid_dir/.*.pid
    rm -vf .nginx.pid
    ;;

    reset)
    set +e
    cd backend
    rm -rf build
    rm -rf public
    mkdir public
    npx typeorm schema:drop
    npx tsc --build tsconfig.json
    npx fixtures ./fixtures/Site.yml
    cd ..
    ;;

    install)
    echo "Installing backend..."
    cd backend
    npm install
    ! is_production && backend_postinstall
    echo
    echo "Installing frontend..."
    cd ../frontend
    npm install
    cd ..
    ;;

    ci)
    echo "Installing backend..."
    cd backend
    npm ci
    backend_postinstall
    echo
    echo "Installing frontend..."
    cd ../frontend
    npm ci
    cd ..
    ;;

    lint)
    cd frontend
    npm run lint
    cd ../backend
    npm run lint
    cd ..
    ;;

    build)
    echo "Building frontend..."
    cd frontend
    [ -d dist ] && rm -rf dist
    npm run build
    echo "Building backend..."
    cd ../backend
    [ -d build ] && rm -rf build
    npm run build
    cd ..
    ;;

    selenium-test)
    cd frontend
    npx vue-cli-service build --mode e2e
    cd ../backend
    npx jest tests/selenium
    cd ..
    ;;

    *)
    echo "Unknown action $action"
    exit 1
    ;;
esac

